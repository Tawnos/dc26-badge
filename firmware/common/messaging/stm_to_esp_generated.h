// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_STMTOESP_DARKNET7_H_
#define FLATBUFFERS_GENERATED_STMTOESP_DARKNET7_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace darknet7 {

struct WiFiNPCInteract;

struct WiFiScan;

struct SetupAP;

struct StopAP;

struct CommunicationStatusRequest;

struct BLEAdvertise;

struct BLEGetInfectionData;

struct BLESetDeviceName;

struct BLESetExposureData;

struct BLESetInfectionData;

struct BLESetCureData;

struct BLEScanForDevices;

struct BLEPairWithDevice;

struct BLESendPINConfirmation;

struct BLESendDataToDevice;

struct BLESendDNPairComplete;

struct BLEDisconnect;

struct ESPRequest;

struct STMToESPRequest;

enum STMToESPAny {
  STMToESPAny_NONE = 0,
  STMToESPAny_SetupAP = 1,
  STMToESPAny_StopAP = 2,
  STMToESPAny_BytesToFromAddress = 3,
  STMToESPAny_DisplayMessage = 4,
  STMToESPAny_ESPRequest = 5,
  STMToESPAny_CommunicationStatusRequest = 6,
  STMToESPAny_BLEGetInfectionData = 7,
  STMToESPAny_BLEAdvertise = 8,
  STMToESPAny_BLESetDeviceName = 9,
  STMToESPAny_BLESetInfectionData = 10,
  STMToESPAny_BLESetExposureData = 11,
  STMToESPAny_BLESetCureData = 12,
  STMToESPAny_BLEScanForDevices = 13,
  STMToESPAny_BLEPairWithDevice = 14,
  STMToESPAny_BLESendPINConfirmation = 15,
  STMToESPAny_BLESendDataToDevice = 16,
  STMToESPAny_BLESendDNPairComplete = 17,
  STMToESPAny_BLEDisconnect = 18,
  STMToESPAny_WiFiScan = 19,
  STMToESPAny_WiFiNPCInteract = 20,
  STMToESPAny_MIN = STMToESPAny_NONE,
  STMToESPAny_MAX = STMToESPAny_WiFiNPCInteract
};

inline const STMToESPAny (&EnumValuesSTMToESPAny())[21] {
  static const STMToESPAny values[] = {
    STMToESPAny_NONE,
    STMToESPAny_SetupAP,
    STMToESPAny_StopAP,
    STMToESPAny_BytesToFromAddress,
    STMToESPAny_DisplayMessage,
    STMToESPAny_ESPRequest,
    STMToESPAny_CommunicationStatusRequest,
    STMToESPAny_BLEGetInfectionData,
    STMToESPAny_BLEAdvertise,
    STMToESPAny_BLESetDeviceName,
    STMToESPAny_BLESetInfectionData,
    STMToESPAny_BLESetExposureData,
    STMToESPAny_BLESetCureData,
    STMToESPAny_BLEScanForDevices,
    STMToESPAny_BLEPairWithDevice,
    STMToESPAny_BLESendPINConfirmation,
    STMToESPAny_BLESendDataToDevice,
    STMToESPAny_BLESendDNPairComplete,
    STMToESPAny_BLEDisconnect,
    STMToESPAny_WiFiScan,
    STMToESPAny_WiFiNPCInteract
  };
  return values;
}

inline const char * const *EnumNamesSTMToESPAny() {
  static const char * const names[] = {
    "NONE",
    "SetupAP",
    "StopAP",
    "BytesToFromAddress",
    "DisplayMessage",
    "ESPRequest",
    "CommunicationStatusRequest",
    "BLEGetInfectionData",
    "BLEAdvertise",
    "BLESetDeviceName",
    "BLESetInfectionData",
    "BLESetExposureData",
    "BLESetCureData",
    "BLEScanForDevices",
    "BLEPairWithDevice",
    "BLESendPINConfirmation",
    "BLESendDataToDevice",
    "BLESendDNPairComplete",
    "BLEDisconnect",
    "WiFiScan",
    "WiFiNPCInteract",
    nullptr
  };
  return names;
}

inline const char *EnumNameSTMToESPAny(STMToESPAny e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesSTMToESPAny()[index];
}

template<typename T> struct STMToESPAnyTraits {
  static const STMToESPAny enum_value = STMToESPAny_NONE;
};

template<> struct STMToESPAnyTraits<SetupAP> {
  static const STMToESPAny enum_value = STMToESPAny_SetupAP;
};

template<> struct STMToESPAnyTraits<StopAP> {
  static const STMToESPAny enum_value = STMToESPAny_StopAP;
};

template<> struct STMToESPAnyTraits<BytesToFromAddress> {
  static const STMToESPAny enum_value = STMToESPAny_BytesToFromAddress;
};

template<> struct STMToESPAnyTraits<DisplayMessage> {
  static const STMToESPAny enum_value = STMToESPAny_DisplayMessage;
};

template<> struct STMToESPAnyTraits<ESPRequest> {
  static const STMToESPAny enum_value = STMToESPAny_ESPRequest;
};

template<> struct STMToESPAnyTraits<CommunicationStatusRequest> {
  static const STMToESPAny enum_value = STMToESPAny_CommunicationStatusRequest;
};

template<> struct STMToESPAnyTraits<BLEGetInfectionData> {
  static const STMToESPAny enum_value = STMToESPAny_BLEGetInfectionData;
};

template<> struct STMToESPAnyTraits<BLEAdvertise> {
  static const STMToESPAny enum_value = STMToESPAny_BLEAdvertise;
};

template<> struct STMToESPAnyTraits<BLESetDeviceName> {
  static const STMToESPAny enum_value = STMToESPAny_BLESetDeviceName;
};

template<> struct STMToESPAnyTraits<BLESetInfectionData> {
  static const STMToESPAny enum_value = STMToESPAny_BLESetInfectionData;
};

template<> struct STMToESPAnyTraits<BLESetExposureData> {
  static const STMToESPAny enum_value = STMToESPAny_BLESetExposureData;
};

template<> struct STMToESPAnyTraits<BLESetCureData> {
  static const STMToESPAny enum_value = STMToESPAny_BLESetCureData;
};

template<> struct STMToESPAnyTraits<BLEScanForDevices> {
  static const STMToESPAny enum_value = STMToESPAny_BLEScanForDevices;
};

template<> struct STMToESPAnyTraits<BLEPairWithDevice> {
  static const STMToESPAny enum_value = STMToESPAny_BLEPairWithDevice;
};

template<> struct STMToESPAnyTraits<BLESendPINConfirmation> {
  static const STMToESPAny enum_value = STMToESPAny_BLESendPINConfirmation;
};

template<> struct STMToESPAnyTraits<BLESendDataToDevice> {
  static const STMToESPAny enum_value = STMToESPAny_BLESendDataToDevice;
};

template<> struct STMToESPAnyTraits<BLESendDNPairComplete> {
  static const STMToESPAny enum_value = STMToESPAny_BLESendDNPairComplete;
};

template<> struct STMToESPAnyTraits<BLEDisconnect> {
  static const STMToESPAny enum_value = STMToESPAny_BLEDisconnect;
};

template<> struct STMToESPAnyTraits<WiFiScan> {
  static const STMToESPAny enum_value = STMToESPAny_WiFiScan;
};

template<> struct STMToESPAnyTraits<WiFiNPCInteract> {
  static const STMToESPAny enum_value = STMToESPAny_WiFiNPCInteract;
};

bool VerifySTMToESPAny(flatbuffers::Verifier &verifier, const void *obj, STMToESPAny type);
bool VerifySTMToESPAnyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

enum ESPRequestType {
  ESPRequestType_SYSTEM_INFO = 0,
  ESPRequestType_MIN = ESPRequestType_SYSTEM_INFO,
  ESPRequestType_MAX = ESPRequestType_SYSTEM_INFO
};

inline const ESPRequestType (&EnumValuesESPRequestType())[1] {
  static const ESPRequestType values[] = {
    ESPRequestType_SYSTEM_INFO
  };
  return values;
}

inline const char * const *EnumNamesESPRequestType() {
  static const char * const names[] = {
    "SYSTEM_INFO",
    nullptr
  };
  return names;
}

inline const char *EnumNameESPRequestType(ESPRequestType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesESPRequestType()[index];
}

struct WiFiNPCInteract FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_BSSID = 4,
    VT_SSID = 6,
    VT_TYPE = 8,
    VT_NPCNAME = 10,
    VT_ACTION = 12
  };
  const flatbuffers::Vector<uint8_t> *bssid() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_BSSID);
  }
  const flatbuffers::String *ssid() const {
    return GetPointer<const flatbuffers::String *>(VT_SSID);
  }
  int8_t type() const {
    return GetField<int8_t>(VT_TYPE, 0);
  }
  const flatbuffers::String *npcname() const {
    return GetPointer<const flatbuffers::String *>(VT_NPCNAME);
  }
  const flatbuffers::String *action() const {
    return GetPointer<const flatbuffers::String *>(VT_ACTION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BSSID) &&
           verifier.Verify(bssid()) &&
           VerifyOffset(verifier, VT_SSID) &&
           verifier.Verify(ssid()) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_NPCNAME) &&
           verifier.Verify(npcname()) &&
           VerifyOffset(verifier, VT_ACTION) &&
           verifier.Verify(action()) &&
           verifier.EndTable();
  }
};

struct WiFiNPCInteractBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_bssid(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> bssid) {
    fbb_.AddOffset(WiFiNPCInteract::VT_BSSID, bssid);
  }
  void add_ssid(flatbuffers::Offset<flatbuffers::String> ssid) {
    fbb_.AddOffset(WiFiNPCInteract::VT_SSID, ssid);
  }
  void add_type(int8_t type) {
    fbb_.AddElement<int8_t>(WiFiNPCInteract::VT_TYPE, type, 0);
  }
  void add_npcname(flatbuffers::Offset<flatbuffers::String> npcname) {
    fbb_.AddOffset(WiFiNPCInteract::VT_NPCNAME, npcname);
  }
  void add_action(flatbuffers::Offset<flatbuffers::String> action) {
    fbb_.AddOffset(WiFiNPCInteract::VT_ACTION, action);
  }
  explicit WiFiNPCInteractBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  WiFiNPCInteractBuilder &operator=(const WiFiNPCInteractBuilder &);
  flatbuffers::Offset<WiFiNPCInteract> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<WiFiNPCInteract>(end);
    return o;
  }
};

inline flatbuffers::Offset<WiFiNPCInteract> CreateWiFiNPCInteract(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> bssid = 0,
    flatbuffers::Offset<flatbuffers::String> ssid = 0,
    int8_t type = 0,
    flatbuffers::Offset<flatbuffers::String> npcname = 0,
    flatbuffers::Offset<flatbuffers::String> action = 0) {
  WiFiNPCInteractBuilder builder_(_fbb);
  builder_.add_action(action);
  builder_.add_npcname(npcname);
  builder_.add_ssid(ssid);
  builder_.add_bssid(bssid);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<WiFiNPCInteract> CreateWiFiNPCInteractDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *bssid = nullptr,
    const char *ssid = nullptr,
    int8_t type = 0,
    const char *npcname = nullptr,
    const char *action = nullptr) {
  return darknet7::CreateWiFiNPCInteract(
      _fbb,
      bssid ? _fbb.CreateVector<uint8_t>(*bssid) : 0,
      ssid ? _fbb.CreateString(ssid) : 0,
      type,
      npcname ? _fbb.CreateString(npcname) : 0,
      action ? _fbb.CreateString(action) : 0);
}

struct WiFiScan FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_FILTER = 4
  };
  WiFiScanFilter filter() const {
    return static_cast<WiFiScanFilter>(GetField<int8_t>(VT_FILTER, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_FILTER) &&
           verifier.EndTable();
  }
};

struct WiFiScanBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_filter(WiFiScanFilter filter) {
    fbb_.AddElement<int8_t>(WiFiScan::VT_FILTER, static_cast<int8_t>(filter), 0);
  }
  explicit WiFiScanBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  WiFiScanBuilder &operator=(const WiFiScanBuilder &);
  flatbuffers::Offset<WiFiScan> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<WiFiScan>(end);
    return o;
  }
};

inline flatbuffers::Offset<WiFiScan> CreateWiFiScan(
    flatbuffers::FlatBufferBuilder &_fbb,
    WiFiScanFilter filter = WiFiScanFilter_ALL) {
  WiFiScanBuilder builder_(_fbb);
  builder_.add_filter(filter);
  return builder_.Finish();
}

struct SetupAP FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SSID = 4,
    VT_PASSWD = 6,
    VT_MODE = 8
  };
  const flatbuffers::String *ssid() const {
    return GetPointer<const flatbuffers::String *>(VT_SSID);
  }
  const flatbuffers::String *passwd() const {
    return GetPointer<const flatbuffers::String *>(VT_PASSWD);
  }
  WifiMode mode() const {
    return static_cast<WifiMode>(GetField<int8_t>(VT_MODE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SSID) &&
           verifier.Verify(ssid()) &&
           VerifyOffset(verifier, VT_PASSWD) &&
           verifier.Verify(passwd()) &&
           VerifyField<int8_t>(verifier, VT_MODE) &&
           verifier.EndTable();
  }
};

struct SetupAPBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ssid(flatbuffers::Offset<flatbuffers::String> ssid) {
    fbb_.AddOffset(SetupAP::VT_SSID, ssid);
  }
  void add_passwd(flatbuffers::Offset<flatbuffers::String> passwd) {
    fbb_.AddOffset(SetupAP::VT_PASSWD, passwd);
  }
  void add_mode(WifiMode mode) {
    fbb_.AddElement<int8_t>(SetupAP::VT_MODE, static_cast<int8_t>(mode), 0);
  }
  explicit SetupAPBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SetupAPBuilder &operator=(const SetupAPBuilder &);
  flatbuffers::Offset<SetupAP> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SetupAP>(end);
    return o;
  }
};

inline flatbuffers::Offset<SetupAP> CreateSetupAP(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> ssid = 0,
    flatbuffers::Offset<flatbuffers::String> passwd = 0,
    WifiMode mode = WifiMode_UNKNOWN) {
  SetupAPBuilder builder_(_fbb);
  builder_.add_passwd(passwd);
  builder_.add_ssid(ssid);
  builder_.add_mode(mode);
  return builder_.Finish();
}

inline flatbuffers::Offset<SetupAP> CreateSetupAPDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *ssid = nullptr,
    const char *passwd = nullptr,
    WifiMode mode = WifiMode_UNKNOWN) {
  return darknet7::CreateSetupAP(
      _fbb,
      ssid ? _fbb.CreateString(ssid) : 0,
      passwd ? _fbb.CreateString(passwd) : 0,
      mode);
}

struct StopAP FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct StopAPBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit StopAPBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  StopAPBuilder &operator=(const StopAPBuilder &);
  flatbuffers::Offset<StopAP> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<StopAP>(end);
    return o;
  }
};

inline flatbuffers::Offset<StopAP> CreateStopAP(
    flatbuffers::FlatBufferBuilder &_fbb) {
  StopAPBuilder builder_(_fbb);
  return builder_.Finish();
}

struct CommunicationStatusRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct CommunicationStatusRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit CommunicationStatusRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CommunicationStatusRequestBuilder &operator=(const CommunicationStatusRequestBuilder &);
  flatbuffers::Offset<CommunicationStatusRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CommunicationStatusRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<CommunicationStatusRequest> CreateCommunicationStatusRequest(
    flatbuffers::FlatBufferBuilder &_fbb) {
  CommunicationStatusRequestBuilder builder_(_fbb);
  return builder_.Finish();
}

struct BLEAdvertise FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_STATE = 4
  };
  bool state() const {
    return GetField<uint8_t>(VT_STATE, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_STATE) &&
           verifier.EndTable();
  }
};

struct BLEAdvertiseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_state(bool state) {
    fbb_.AddElement<uint8_t>(BLEAdvertise::VT_STATE, static_cast<uint8_t>(state), 0);
  }
  explicit BLEAdvertiseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BLEAdvertiseBuilder &operator=(const BLEAdvertiseBuilder &);
  flatbuffers::Offset<BLEAdvertise> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BLEAdvertise>(end);
    return o;
  }
};

inline flatbuffers::Offset<BLEAdvertise> CreateBLEAdvertise(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool state = false) {
  BLEAdvertiseBuilder builder_(_fbb);
  builder_.add_state(state);
  return builder_.Finish();
}

struct BLEGetInfectionData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct BLEGetInfectionDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit BLEGetInfectionDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BLEGetInfectionDataBuilder &operator=(const BLEGetInfectionDataBuilder &);
  flatbuffers::Offset<BLEGetInfectionData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BLEGetInfectionData>(end);
    return o;
  }
};

inline flatbuffers::Offset<BLEGetInfectionData> CreateBLEGetInfectionData(
    flatbuffers::FlatBufferBuilder &_fbb) {
  BLEGetInfectionDataBuilder builder_(_fbb);
  return builder_.Finish();
}

struct BLESetDeviceName FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           verifier.EndTable();
  }
};

struct BLESetDeviceNameBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(BLESetDeviceName::VT_NAME, name);
  }
  explicit BLESetDeviceNameBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BLESetDeviceNameBuilder &operator=(const BLESetDeviceNameBuilder &);
  flatbuffers::Offset<BLESetDeviceName> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BLESetDeviceName>(end);
    return o;
  }
};

inline flatbuffers::Offset<BLESetDeviceName> CreateBLESetDeviceName(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  BLESetDeviceNameBuilder builder_(_fbb);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<BLESetDeviceName> CreateBLESetDeviceNameDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr) {
  return darknet7::CreateBLESetDeviceName(
      _fbb,
      name ? _fbb.CreateString(name) : 0);
}

struct BLESetExposureData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VECTORS = 4
  };
  uint16_t vectors() const {
    return GetField<uint16_t>(VT_VECTORS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_VECTORS) &&
           verifier.EndTable();
  }
};

struct BLESetExposureDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_vectors(uint16_t vectors) {
    fbb_.AddElement<uint16_t>(BLESetExposureData::VT_VECTORS, vectors, 0);
  }
  explicit BLESetExposureDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BLESetExposureDataBuilder &operator=(const BLESetExposureDataBuilder &);
  flatbuffers::Offset<BLESetExposureData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BLESetExposureData>(end);
    return o;
  }
};

inline flatbuffers::Offset<BLESetExposureData> CreateBLESetExposureData(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t vectors = 0) {
  BLESetExposureDataBuilder builder_(_fbb);
  builder_.add_vectors(vectors);
  return builder_.Finish();
}

struct BLESetInfectionData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VECTORS = 4
  };
  uint16_t vectors() const {
    return GetField<uint16_t>(VT_VECTORS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_VECTORS) &&
           verifier.EndTable();
  }
};

struct BLESetInfectionDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_vectors(uint16_t vectors) {
    fbb_.AddElement<uint16_t>(BLESetInfectionData::VT_VECTORS, vectors, 0);
  }
  explicit BLESetInfectionDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BLESetInfectionDataBuilder &operator=(const BLESetInfectionDataBuilder &);
  flatbuffers::Offset<BLESetInfectionData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BLESetInfectionData>(end);
    return o;
  }
};

inline flatbuffers::Offset<BLESetInfectionData> CreateBLESetInfectionData(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t vectors = 0) {
  BLESetInfectionDataBuilder builder_(_fbb);
  builder_.add_vectors(vectors);
  return builder_.Finish();
}

struct BLESetCureData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VECTORS = 4
  };
  uint16_t vectors() const {
    return GetField<uint16_t>(VT_VECTORS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_VECTORS) &&
           verifier.EndTable();
  }
};

struct BLESetCureDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_vectors(uint16_t vectors) {
    fbb_.AddElement<uint16_t>(BLESetCureData::VT_VECTORS, vectors, 0);
  }
  explicit BLESetCureDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BLESetCureDataBuilder &operator=(const BLESetCureDataBuilder &);
  flatbuffers::Offset<BLESetCureData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BLESetCureData>(end);
    return o;
  }
};

inline flatbuffers::Offset<BLESetCureData> CreateBLESetCureData(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t vectors = 0) {
  BLESetCureDataBuilder builder_(_fbb);
  builder_.add_vectors(vectors);
  return builder_.Finish();
}

struct BLEScanForDevices FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_FILTER = 4
  };
  uint8_t filter() const {
    return GetField<uint8_t>(VT_FILTER, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_FILTER) &&
           verifier.EndTable();
  }
};

struct BLEScanForDevicesBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_filter(uint8_t filter) {
    fbb_.AddElement<uint8_t>(BLEScanForDevices::VT_FILTER, filter, 0);
  }
  explicit BLEScanForDevicesBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BLEScanForDevicesBuilder &operator=(const BLEScanForDevicesBuilder &);
  flatbuffers::Offset<BLEScanForDevices> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BLEScanForDevices>(end);
    return o;
  }
};

inline flatbuffers::Offset<BLEScanForDevices> CreateBLEScanForDevices(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t filter = 0) {
  BLEScanForDevicesBuilder builder_(_fbb);
  builder_.add_filter(filter);
  return builder_.Finish();
}

struct BLEPairWithDevice FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ADDR = 4
  };
  const flatbuffers::String *addr() const {
    return GetPointer<const flatbuffers::String *>(VT_ADDR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ADDR) &&
           verifier.Verify(addr()) &&
           verifier.EndTable();
  }
};

struct BLEPairWithDeviceBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_addr(flatbuffers::Offset<flatbuffers::String> addr) {
    fbb_.AddOffset(BLEPairWithDevice::VT_ADDR, addr);
  }
  explicit BLEPairWithDeviceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BLEPairWithDeviceBuilder &operator=(const BLEPairWithDeviceBuilder &);
  flatbuffers::Offset<BLEPairWithDevice> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BLEPairWithDevice>(end);
    return o;
  }
};

inline flatbuffers::Offset<BLEPairWithDevice> CreateBLEPairWithDevice(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> addr = 0) {
  BLEPairWithDeviceBuilder builder_(_fbb);
  builder_.add_addr(addr);
  return builder_.Finish();
}

inline flatbuffers::Offset<BLEPairWithDevice> CreateBLEPairWithDeviceDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *addr = nullptr) {
  return darknet7::CreateBLEPairWithDevice(
      _fbb,
      addr ? _fbb.CreateString(addr) : 0);
}

struct BLESendPINConfirmation FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CONFIRM = 4
  };
  bool confirm() const {
    return GetField<uint8_t>(VT_CONFIRM, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_CONFIRM) &&
           verifier.EndTable();
  }
};

struct BLESendPINConfirmationBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_confirm(bool confirm) {
    fbb_.AddElement<uint8_t>(BLESendPINConfirmation::VT_CONFIRM, static_cast<uint8_t>(confirm), 0);
  }
  explicit BLESendPINConfirmationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BLESendPINConfirmationBuilder &operator=(const BLESendPINConfirmationBuilder &);
  flatbuffers::Offset<BLESendPINConfirmation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BLESendPINConfirmation>(end);
    return o;
  }
};

inline flatbuffers::Offset<BLESendPINConfirmation> CreateBLESendPINConfirmation(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool confirm = false) {
  BLESendPINConfirmationBuilder builder_(_fbb);
  builder_.add_confirm(confirm);
  return builder_.Finish();
}

struct BLESendDataToDevice FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DATA = 4
  };
  const flatbuffers::String *data() const {
    return GetPointer<const flatbuffers::String *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.Verify(data()) &&
           verifier.EndTable();
  }
};

struct BLESendDataToDeviceBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::String> data) {
    fbb_.AddOffset(BLESendDataToDevice::VT_DATA, data);
  }
  explicit BLESendDataToDeviceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BLESendDataToDeviceBuilder &operator=(const BLESendDataToDeviceBuilder &);
  flatbuffers::Offset<BLESendDataToDevice> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BLESendDataToDevice>(end);
    return o;
  }
};

inline flatbuffers::Offset<BLESendDataToDevice> CreateBLESendDataToDevice(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> data = 0) {
  BLESendDataToDeviceBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<BLESendDataToDevice> CreateBLESendDataToDeviceDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *data = nullptr) {
  return darknet7::CreateBLESendDataToDevice(
      _fbb,
      data ? _fbb.CreateString(data) : 0);
}

struct BLESendDNPairComplete FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct BLESendDNPairCompleteBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit BLESendDNPairCompleteBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BLESendDNPairCompleteBuilder &operator=(const BLESendDNPairCompleteBuilder &);
  flatbuffers::Offset<BLESendDNPairComplete> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BLESendDNPairComplete>(end);
    return o;
  }
};

inline flatbuffers::Offset<BLESendDNPairComplete> CreateBLESendDNPairComplete(
    flatbuffers::FlatBufferBuilder &_fbb) {
  BLESendDNPairCompleteBuilder builder_(_fbb);
  return builder_.Finish();
}

struct BLEDisconnect FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct BLEDisconnectBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit BLEDisconnectBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BLEDisconnectBuilder &operator=(const BLEDisconnectBuilder &);
  flatbuffers::Offset<BLEDisconnect> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BLEDisconnect>(end);
    return o;
  }
};

inline flatbuffers::Offset<BLEDisconnect> CreateBLEDisconnect(
    flatbuffers::FlatBufferBuilder &_fbb) {
  BLEDisconnectBuilder builder_(_fbb);
  return builder_.Finish();
}

struct ESPRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_REQUESTTYPE = 4
  };
  ESPRequestType requestType() const {
    return static_cast<ESPRequestType>(GetField<int8_t>(VT_REQUESTTYPE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_REQUESTTYPE) &&
           verifier.EndTable();
  }
};

struct ESPRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_requestType(ESPRequestType requestType) {
    fbb_.AddElement<int8_t>(ESPRequest::VT_REQUESTTYPE, static_cast<int8_t>(requestType), 0);
  }
  explicit ESPRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ESPRequestBuilder &operator=(const ESPRequestBuilder &);
  flatbuffers::Offset<ESPRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ESPRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<ESPRequest> CreateESPRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    ESPRequestType requestType = ESPRequestType_SYSTEM_INFO) {
  ESPRequestBuilder builder_(_fbb);
  builder_.add_requestType(requestType);
  return builder_.Finish();
}

struct STMToESPRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_MSGINSTANCEID = 4,
    VT_MSG_TYPE = 6,
    VT_MSG = 8
  };
  uint32_t msgInstanceID() const {
    return GetField<uint32_t>(VT_MSGINSTANCEID, 0);
  }
  STMToESPAny Msg_type() const {
    return static_cast<STMToESPAny>(GetField<uint8_t>(VT_MSG_TYPE, 0));
  }
  const void *Msg() const {
    return GetPointer<const void *>(VT_MSG);
  }
  template<typename T> const T *Msg_as() const;
  const SetupAP *Msg_as_SetupAP() const {
    return Msg_type() == STMToESPAny_SetupAP ? static_cast<const SetupAP *>(Msg()) : nullptr;
  }
  const StopAP *Msg_as_StopAP() const {
    return Msg_type() == STMToESPAny_StopAP ? static_cast<const StopAP *>(Msg()) : nullptr;
  }
  const BytesToFromAddress *Msg_as_BytesToFromAddress() const {
    return Msg_type() == STMToESPAny_BytesToFromAddress ? static_cast<const BytesToFromAddress *>(Msg()) : nullptr;
  }
  const DisplayMessage *Msg_as_DisplayMessage() const {
    return Msg_type() == STMToESPAny_DisplayMessage ? static_cast<const DisplayMessage *>(Msg()) : nullptr;
  }
  const ESPRequest *Msg_as_ESPRequest() const {
    return Msg_type() == STMToESPAny_ESPRequest ? static_cast<const ESPRequest *>(Msg()) : nullptr;
  }
  const CommunicationStatusRequest *Msg_as_CommunicationStatusRequest() const {
    return Msg_type() == STMToESPAny_CommunicationStatusRequest ? static_cast<const CommunicationStatusRequest *>(Msg()) : nullptr;
  }
  const BLEGetInfectionData *Msg_as_BLEGetInfectionData() const {
    return Msg_type() == STMToESPAny_BLEGetInfectionData ? static_cast<const BLEGetInfectionData *>(Msg()) : nullptr;
  }
  const BLEAdvertise *Msg_as_BLEAdvertise() const {
    return Msg_type() == STMToESPAny_BLEAdvertise ? static_cast<const BLEAdvertise *>(Msg()) : nullptr;
  }
  const BLESetDeviceName *Msg_as_BLESetDeviceName() const {
    return Msg_type() == STMToESPAny_BLESetDeviceName ? static_cast<const BLESetDeviceName *>(Msg()) : nullptr;
  }
  const BLESetInfectionData *Msg_as_BLESetInfectionData() const {
    return Msg_type() == STMToESPAny_BLESetInfectionData ? static_cast<const BLESetInfectionData *>(Msg()) : nullptr;
  }
  const BLESetExposureData *Msg_as_BLESetExposureData() const {
    return Msg_type() == STMToESPAny_BLESetExposureData ? static_cast<const BLESetExposureData *>(Msg()) : nullptr;
  }
  const BLESetCureData *Msg_as_BLESetCureData() const {
    return Msg_type() == STMToESPAny_BLESetCureData ? static_cast<const BLESetCureData *>(Msg()) : nullptr;
  }
  const BLEScanForDevices *Msg_as_BLEScanForDevices() const {
    return Msg_type() == STMToESPAny_BLEScanForDevices ? static_cast<const BLEScanForDevices *>(Msg()) : nullptr;
  }
  const BLEPairWithDevice *Msg_as_BLEPairWithDevice() const {
    return Msg_type() == STMToESPAny_BLEPairWithDevice ? static_cast<const BLEPairWithDevice *>(Msg()) : nullptr;
  }
  const BLESendPINConfirmation *Msg_as_BLESendPINConfirmation() const {
    return Msg_type() == STMToESPAny_BLESendPINConfirmation ? static_cast<const BLESendPINConfirmation *>(Msg()) : nullptr;
  }
  const BLESendDataToDevice *Msg_as_BLESendDataToDevice() const {
    return Msg_type() == STMToESPAny_BLESendDataToDevice ? static_cast<const BLESendDataToDevice *>(Msg()) : nullptr;
  }
  const BLESendDNPairComplete *Msg_as_BLESendDNPairComplete() const {
    return Msg_type() == STMToESPAny_BLESendDNPairComplete ? static_cast<const BLESendDNPairComplete *>(Msg()) : nullptr;
  }
  const BLEDisconnect *Msg_as_BLEDisconnect() const {
    return Msg_type() == STMToESPAny_BLEDisconnect ? static_cast<const BLEDisconnect *>(Msg()) : nullptr;
  }
  const WiFiScan *Msg_as_WiFiScan() const {
    return Msg_type() == STMToESPAny_WiFiScan ? static_cast<const WiFiScan *>(Msg()) : nullptr;
  }
  const WiFiNPCInteract *Msg_as_WiFiNPCInteract() const {
    return Msg_type() == STMToESPAny_WiFiNPCInteract ? static_cast<const WiFiNPCInteract *>(Msg()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_MSGINSTANCEID) &&
           VerifyField<uint8_t>(verifier, VT_MSG_TYPE) &&
           VerifyOffset(verifier, VT_MSG) &&
           VerifySTMToESPAny(verifier, Msg(), Msg_type()) &&
           verifier.EndTable();
  }
};

template<> inline const SetupAP *STMToESPRequest::Msg_as<SetupAP>() const {
  return Msg_as_SetupAP();
}

template<> inline const StopAP *STMToESPRequest::Msg_as<StopAP>() const {
  return Msg_as_StopAP();
}

template<> inline const BytesToFromAddress *STMToESPRequest::Msg_as<BytesToFromAddress>() const {
  return Msg_as_BytesToFromAddress();
}

template<> inline const DisplayMessage *STMToESPRequest::Msg_as<DisplayMessage>() const {
  return Msg_as_DisplayMessage();
}

template<> inline const ESPRequest *STMToESPRequest::Msg_as<ESPRequest>() const {
  return Msg_as_ESPRequest();
}

template<> inline const CommunicationStatusRequest *STMToESPRequest::Msg_as<CommunicationStatusRequest>() const {
  return Msg_as_CommunicationStatusRequest();
}

template<> inline const BLEGetInfectionData *STMToESPRequest::Msg_as<BLEGetInfectionData>() const {
  return Msg_as_BLEGetInfectionData();
}

template<> inline const BLEAdvertise *STMToESPRequest::Msg_as<BLEAdvertise>() const {
  return Msg_as_BLEAdvertise();
}

template<> inline const BLESetDeviceName *STMToESPRequest::Msg_as<BLESetDeviceName>() const {
  return Msg_as_BLESetDeviceName();
}

template<> inline const BLESetInfectionData *STMToESPRequest::Msg_as<BLESetInfectionData>() const {
  return Msg_as_BLESetInfectionData();
}

template<> inline const BLESetExposureData *STMToESPRequest::Msg_as<BLESetExposureData>() const {
  return Msg_as_BLESetExposureData();
}

template<> inline const BLESetCureData *STMToESPRequest::Msg_as<BLESetCureData>() const {
  return Msg_as_BLESetCureData();
}

template<> inline const BLEScanForDevices *STMToESPRequest::Msg_as<BLEScanForDevices>() const {
  return Msg_as_BLEScanForDevices();
}

template<> inline const BLEPairWithDevice *STMToESPRequest::Msg_as<BLEPairWithDevice>() const {
  return Msg_as_BLEPairWithDevice();
}

template<> inline const BLESendPINConfirmation *STMToESPRequest::Msg_as<BLESendPINConfirmation>() const {
  return Msg_as_BLESendPINConfirmation();
}

template<> inline const BLESendDataToDevice *STMToESPRequest::Msg_as<BLESendDataToDevice>() const {
  return Msg_as_BLESendDataToDevice();
}

template<> inline const BLESendDNPairComplete *STMToESPRequest::Msg_as<BLESendDNPairComplete>() const {
  return Msg_as_BLESendDNPairComplete();
}

template<> inline const BLEDisconnect *STMToESPRequest::Msg_as<BLEDisconnect>() const {
  return Msg_as_BLEDisconnect();
}

template<> inline const WiFiScan *STMToESPRequest::Msg_as<WiFiScan>() const {
  return Msg_as_WiFiScan();
}

template<> inline const WiFiNPCInteract *STMToESPRequest::Msg_as<WiFiNPCInteract>() const {
  return Msg_as_WiFiNPCInteract();
}

struct STMToESPRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_msgInstanceID(uint32_t msgInstanceID) {
    fbb_.AddElement<uint32_t>(STMToESPRequest::VT_MSGINSTANCEID, msgInstanceID, 0);
  }
  void add_Msg_type(STMToESPAny Msg_type) {
    fbb_.AddElement<uint8_t>(STMToESPRequest::VT_MSG_TYPE, static_cast<uint8_t>(Msg_type), 0);
  }
  void add_Msg(flatbuffers::Offset<void> Msg) {
    fbb_.AddOffset(STMToESPRequest::VT_MSG, Msg);
  }
  explicit STMToESPRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  STMToESPRequestBuilder &operator=(const STMToESPRequestBuilder &);
  flatbuffers::Offset<STMToESPRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<STMToESPRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<STMToESPRequest> CreateSTMToESPRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t msgInstanceID = 0,
    STMToESPAny Msg_type = STMToESPAny_NONE,
    flatbuffers::Offset<void> Msg = 0) {
  STMToESPRequestBuilder builder_(_fbb);
  builder_.add_Msg(Msg);
  builder_.add_msgInstanceID(msgInstanceID);
  builder_.add_Msg_type(Msg_type);
  return builder_.Finish();
}

inline bool VerifySTMToESPAny(flatbuffers::Verifier &verifier, const void *obj, STMToESPAny type) {
  switch (type) {
    case STMToESPAny_NONE: {
      return true;
    }
    case STMToESPAny_SetupAP: {
      auto ptr = reinterpret_cast<const SetupAP *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case STMToESPAny_StopAP: {
      auto ptr = reinterpret_cast<const StopAP *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case STMToESPAny_BytesToFromAddress: {
      auto ptr = reinterpret_cast<const BytesToFromAddress *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case STMToESPAny_DisplayMessage: {
      auto ptr = reinterpret_cast<const DisplayMessage *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case STMToESPAny_ESPRequest: {
      auto ptr = reinterpret_cast<const ESPRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case STMToESPAny_CommunicationStatusRequest: {
      auto ptr = reinterpret_cast<const CommunicationStatusRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case STMToESPAny_BLEGetInfectionData: {
      auto ptr = reinterpret_cast<const BLEGetInfectionData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case STMToESPAny_BLEAdvertise: {
      auto ptr = reinterpret_cast<const BLEAdvertise *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case STMToESPAny_BLESetDeviceName: {
      auto ptr = reinterpret_cast<const BLESetDeviceName *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case STMToESPAny_BLESetInfectionData: {
      auto ptr = reinterpret_cast<const BLESetInfectionData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case STMToESPAny_BLESetExposureData: {
      auto ptr = reinterpret_cast<const BLESetExposureData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case STMToESPAny_BLESetCureData: {
      auto ptr = reinterpret_cast<const BLESetCureData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case STMToESPAny_BLEScanForDevices: {
      auto ptr = reinterpret_cast<const BLEScanForDevices *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case STMToESPAny_BLEPairWithDevice: {
      auto ptr = reinterpret_cast<const BLEPairWithDevice *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case STMToESPAny_BLESendPINConfirmation: {
      auto ptr = reinterpret_cast<const BLESendPINConfirmation *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case STMToESPAny_BLESendDataToDevice: {
      auto ptr = reinterpret_cast<const BLESendDataToDevice *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case STMToESPAny_BLESendDNPairComplete: {
      auto ptr = reinterpret_cast<const BLESendDNPairComplete *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case STMToESPAny_BLEDisconnect: {
      auto ptr = reinterpret_cast<const BLEDisconnect *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case STMToESPAny_WiFiScan: {
      auto ptr = reinterpret_cast<const WiFiScan *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case STMToESPAny_WiFiNPCInteract: {
      auto ptr = reinterpret_cast<const WiFiNPCInteract *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifySTMToESPAnyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifySTMToESPAny(
        verifier,  values->Get(i), types->GetEnum<STMToESPAny>(i))) {
      return false;
    }
  }
  return true;
}

inline const darknet7::STMToESPRequest *GetSTMToESPRequest(const void *buf) {
  return flatbuffers::GetRoot<darknet7::STMToESPRequest>(buf);
}

inline const darknet7::STMToESPRequest *GetSizePrefixedSTMToESPRequest(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<darknet7::STMToESPRequest>(buf);
}

inline bool VerifySTMToESPRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<darknet7::STMToESPRequest>(nullptr);
}

inline bool VerifySizePrefixedSTMToESPRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<darknet7::STMToESPRequest>(nullptr);
}

inline void FinishSTMToESPRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<darknet7::STMToESPRequest> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSTMToESPRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<darknet7::STMToESPRequest> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace darknet7

#endif  // FLATBUFFERS_GENERATED_STMTOESP_DARKNET7_H_
